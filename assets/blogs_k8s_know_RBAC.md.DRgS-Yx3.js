import{_ as s,c as n,o as a,a2 as e}from"./chunks/framework.DukRYrIy.js";const p="/assets/image-20230630143323612.B8gzVBSr.png",l="/assets/zh-cn_image_0261301557.zx3DuSu7.png",i="/assets/image-20230630150228491.CTOVKXKR.png",r="/assets/image-20230704160100890.CVPIMA05.png",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/k8s/know/RBAC.md","filePath":"blogs/k8s/know/RBAC.md","lastUpdated":1711963937000}'),t={name:"blogs/k8s/know/RBAC.md"},c=e(`<h2 id="k8s中的rbac" tabindex="-1">k8s中的RBAC <a class="header-anchor" href="#k8s中的rbac" aria-label="Permalink to &quot;k8s中的RBAC&quot;">​</a></h2><p>我们在业务开发中经常会遇到权限认证和授权业务。</p><p>前面说到的serviceAccount就是k8s的认证过程。而k8s的授权机制是通过RBAC来完成的。</p><p>RBAC顾名思义即基于角色的权限控制。</p><p>RBAC的授权是通过四种资源来配置的，它们又可以分成两组</p><ul><li><strong>Role（角色）</strong> 和 <strong>ClusterRole（集群角色）</strong>，它们指定了在资源上可以执行哪些动词</li><li><strong>RoleBinding（角色绑定）</strong> 和 <strong>ClusterRoleBinding（集群角色绑定）</strong>，它们将上述角色绑定到特定的用户、组或ServiceAccounts上。</li></ul><p>角色定义了可以做什么操作，而绑定定义了谁可以做这些操作</p><p>在k8s中所有的资源信息都在etcd里，要访问etcd必须通过apiserver。而apiserver就是通过role来控制哪些账号能访问哪些资源。</p><h2 id="role和clusterrole" tabindex="-1">Role和ClusterRole <a class="header-anchor" href="#role和clusterrole" aria-label="Permalink to &quot;Role和ClusterRole&quot;">​</a></h2><p>k8s了有两个和角色相关的资源：Role和ClusterRole</p><p>Role 是定义在一个 namespace 中，而 ClusterRole 是集群级别的。</p><p>定义一个Role</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>apiVersion: rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span>kind: Role</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: test-role</span></span>
<span class="line"><span>  namespace: test</span></span>
<span class="line"><span>rules:</span></span>
<span class="line"><span>- apiGroups: [&quot;&quot;]  # 为空表示为默认的Core API组</span></span>
<span class="line"><span>  resources: [&quot;pods&quot;] # 数据源类型</span></span>
<span class="line"><span>  verbs: [&quot;get&quot;,&quot;watch&quot;,&quot;list&quot;] #赋予的动作权限</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这个Role的规则含义是：在名字为 test的namespace 中，对Pods有get,watch,list的权限</p><p>注意一点：在指定资源时必须使用复数的形式。</p><p>定义一个ClusterRole</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>apiVersion: rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span>kind: ClusterRole</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: test-clusterrole</span></span>
<span class="line"><span>rules:</span></span>
<span class="line"><span>- apiGroups: [&quot;&quot;]</span></span>
<span class="line"><span>  resources: [&quot;services&quot;]</span></span>
<span class="line"><span>  verbs: [&quot;get&quot;,&quot;create&quot;,&quot;list&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>与Role的区别就是matadata中没有namespace的限定。</p><p>这个ClusterRole的含义是，对整个集群的service有get，create，list的权限</p><p>分别创建</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kc apply -f test_role.yaml</span></span>
<span class="line"><span>kc apply -f test_clusterrole.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="rules的参数说明" tabindex="-1">rules的参数说明： <a class="header-anchor" href="#rules的参数说明" aria-label="Permalink to &quot;rules的参数说明：&quot;">​</a></h3><ol><li>apiGroups可配置参数 “”（空表示core api组）,“apps”, “autoscaling”, “batch”， “extensions”等等</li></ol><p>这个apiGroups指的就是kubectl api-resources的APIGROUP</p><p><img src="`+p+'" alt="image-20230630143323612"></p><ol start="2"><li>resources可配置参数</li></ol><p>不同的apiGroups对应的resource是不一样的。</p><p>比如 “”组有pods，nodes等等resources</p><p>apps组才有deployments</p><p>就是和代码开发对应的</p><ol start="3"><li><p>verbs可配置参数 “get”，“list”，“watch”， “create”，“update”， “patch”， “delete”，“exec”</p></li><li><p>resourcesNames</p><p>上面三个是必填的，这个resourcesNames是可选的</p><p>他的含义是可以对具体某个资源进行限制。比如对名字是aaa的pod进行授权</p></li></ol><h2 id="rolebinding-和-clusterrolebinding" tabindex="-1">RoleBinding 和 ClusterRoleBinding <a class="header-anchor" href="#rolebinding-和-clusterrolebinding" aria-label="Permalink to &quot;RoleBinding 和 ClusterRoleBinding&quot;">​</a></h2><p>我们定义了role，但现在role只是被定义出来，并没有实际的作用。因为现在role还是孤零零的存在，需要将role和用户进行绑定，才能真正发挥作用。</p><p><img src="'+l+`" alt="img"></p><p>role可以和三种对象subjects绑定，一种是User，一个是Group，最重要的一个就是serviceaccount。</p><h3 id="和useraccount绑定" tabindex="-1">和useraccount绑定 <a class="header-anchor" href="#和useraccount绑定" aria-label="Permalink to &quot;和useraccount绑定&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>apiVersion: rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span>kind: RoleBinding</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: test-rolebinding</span></span>
<span class="line"><span>  namespace: test</span></span>
<span class="line"><span>subjects:</span></span>
<span class="line"><span>- kind: User # 权限资源类型</span></span>
<span class="line"><span>  name: yys # 名称</span></span>
<span class="line"><span>  apiGroup: rbac.authorization.k8s.io</span></span>
<span class="line"><span>roleRef:</span></span>
<span class="line"><span>  kind: Role #要绑定的Role的类型(可以是Role或ClusterRole)</span></span>
<span class="line"><span>  name: test-role # Role的名称</span></span>
<span class="line"><span>  apiGroup: rbac.authorization.k8s.io</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这个绑定的含义是，给用户yys绑定了test-role角色，也就是yys拥有了对名字为 test的namespace 中，对Pods有get,watch,list的权限</p><h4 id="实验" tabindex="-1">实验 <a class="header-anchor" href="#实验" aria-label="Permalink to &quot;实验&quot;">​</a></h4><p>用root用户操作</p><ol><li><p>新建用户yys</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[root@paas-m-k8s-master-1 test]# useradd yys</span></span>
<span class="line"><span>[root@paas-m-k8s-master-1 test]# su - yys</span></span>
<span class="line"><span>[yys@paas-m-k8s-master-1 ~]$ kubectl -n test get pod</span></span>
<span class="line"><span>The connection to the server localhost:8080 was refused - did you specify the right host or port?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>默认肯定是访问不到的，如果想要访问，必须要创建用户的访问证书</p></li><li><p>创建访问证书</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>## 下载证书生成工具 cfssl</span></span>
<span class="line"><span># wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span></span>
<span class="line"><span># wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span></span>
<span class="line"><span># wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## 给执行权限</span></span>
<span class="line"><span># chmod +x *</span></span>
<span class="line"><span># mkdir cert</span></span>
<span class="line"><span># cd cert</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>创建CA证书签名请求JSON文件 yys-csr.json</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;CN&quot;: &quot;yys&quot;,  # 用户名称，必须填你的用户名，因为api-server鉴权时就用证书的CN字段作为用户名</span></span>
<span class="line"><span>  &quot;hosts&quot;: [],  # 主机地址，不填表示所有主机都可使用</span></span>
<span class="line"><span>  &quot;key&quot;: {</span></span>
<span class="line"><span>    &quot;algo&quot;: &quot;rsa&quot;, # 加密算法</span></span>
<span class="line"><span>    &quot;size&quot;: 2048</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>  &quot;names&quot;: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>       &quot;C&quot;: &quot;CN&quot;,</span></span>
<span class="line"><span>       &quot;L&quot;: &quot;BeiJing&quot;,</span></span>
<span class="line"><span>       &quot;O&quot;: &quot;OKK&quot;,</span></span>
<span class="line"><span>       &quot;ST&quot;: &quot;BeiJing&quot;,            </span></span>
<span class="line"><span>       &quot;OU&quot;: &quot;System&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>开始创建访问证书</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># cd /etc/kubernetes/pki/</span></span>
<span class="line"><span># /home/yys/cfssl_linux-amd64 gencert -ca=ca.crt -ca-key=ca.key -profile=kubernetes /home/yys/cert/yys-csr.json | /home/yys/cfssljson_linux-amd64 -bare yys</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+i+`" alt="image-20230630150228491"></p><p>执行成功后多出这三个文件</p></li><li><p>为yys用户生成集群kubeconfig文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>## 给用户创建kubeconfig文件</span></span>
<span class="line"><span>[root@paas-m-k8s-master-1 cert]# pwd</span></span>
<span class="line"><span>/home/yys/cert</span></span>
<span class="line"><span>[root@paas-m-k8s-master-1 cert]# kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/pki/ca.crt --embed-certs=true --server=https://你的master的ip:6443 --kubeconfig=yys.kubeconfig</span></span>
<span class="line"><span>Cluster &quot;kubernetes&quot; set.</span></span>
<span class="line"><span>[root@paas-m-k8s-master-1 cert]# ll</span></span>
<span class="line"><span>总用量 8</span></span>
<span class="line"><span>-rw-rw-r-- 1 yys  yys   231 6月  30 15:00 yys-csr.json</span></span>
<span class="line"><span>-rw------- 1 root root 1570 6月  30 15:07 yys.kubeconfig</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>## 设置客户端参数，绑定用户信息至kubeconfig中</span></span>
<span class="line"><span>[root@paas-m-k8s-master-1 cert]# kubectl config set-credentials yys \\</span></span>
<span class="line"><span> --client-certificate=/etc/kubernetes/pki/yys.pem \\</span></span>
<span class="line"><span> --client-key=/etc/kubernetes/pki/yys-key.pem \\</span></span>
<span class="line"><span> --embed-certs=true \\</span></span>
<span class="line"><span> --kubeconfig=yys.kubeconfig</span></span>
<span class="line"><span>User &quot;yys&quot; set.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## 设置上下文参数</span></span>
<span class="line"><span>[root@paas-m-k8s-master-1 cert]# kubectl config set-context kubernetes \\</span></span>
<span class="line"><span> --cluster=kubernetes \\</span></span>
<span class="line"><span> --user=yys \\</span></span>
<span class="line"><span> --namespace=test \\</span></span>
<span class="line"><span> --kubeconfig=yys.kubeconfig</span></span>
<span class="line"><span>Context &quot;kubernetes created.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div></li><li><p>把kubeconfig文件复制到 用户的home目录的.kube下</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mkdir -p /home/yys/.kube</span></span>
<span class="line"><span>cp /home/yys/cert/yys.kubeconfig  /home/yys/.kube/config</span></span>
<span class="line"><span>chown -R yys:yys /home/yys/.kube</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>切换用户为yys，绑定kubectl读取config</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[root@paas-m-k8s-master-1 .kube]# su - yys</span></span>
<span class="line"><span>[yys@paas-m-k8s-master-1 ~]$ kubectl config use-context kubernetes --kubeconfig=/home/yys/.kube/config</span></span>
<span class="line"><span>Switched to context &quot;kubernetes&quot;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>测试</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[yys@paas-m-k8s-master-1 ~]$ kubectl get pod</span></span>
<span class="line"><span>Error from server (Forbidden): pods is forbidden: User &quot;yys&quot; cannot list resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;test&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>apply 绑定</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>切回root用户</span></span>
<span class="line"><span># kc apply -f test-rolebing.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>应用rolebinding</p><p>再切回yys用户</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[yys@paas-m-k8s-master-1 .kube]$ kubectl get pod</span></span>
<span class="line"><span>NAME                                                       READY   STATUS      RESTARTS   AGE</span></span>
<span class="line"><span>jdktest-9302-e2y-1li-f283862d4944-job-9d9l8                0/1     Error       0          638d</span></span>
<span class="line"><span>nginx-volume-host                                          1/1     Running     0          217d</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>pcloud-testjjj-latest-7t9-esm-e2487db22694-job-29492       0/1     Completed   0          710d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>打印的就是test namespace下的pod。因为我们创建这个Context时已经制定了namespace就是test</p><p>如果干点别的</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[yys@paas-m-k8s-master-1 ~]$ kubectl get ns</span></span>
<span class="line"><span>Error from server (Forbidden): namespaces is forbidden: User &quot;yys&quot; cannot list resource &quot;namespaces&quot; in API group &quot;&quot; at the cluster scope</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>会报没权限</p></li></ol><h3 id="和serviceaccount绑定" tabindex="-1">和serviceaccount绑定 <a class="header-anchor" href="#和serviceaccount绑定" aria-label="Permalink to &quot;和serviceaccount绑定&quot;">​</a></h3><p>我们已经知道，ServiceAccount的主要作用是pod和apiserver交互。我们编写的程序默认是不能直接调用api-server的，需要对pod进行合适的授权，这个授权就是通过和ServiceAccount绑定来做的。</p><p>关于ServiceAccount的介绍，请看这里</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAyNTc5NQ==&amp;mid=2247484735&amp;idx=1&amp;sn=a867bcb3159a2dacf2ce73821c6849d2&amp;chksm=ce612f53f916a645b4661f1159acee7fe147fa69b55c7235dcb2fa348433e9684a9ce555092d&amp;token=301426172&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">说说K8S中的ServiceAccount (qq.com)</a></p><p>在这篇文章里，我们创建了一个命名为mytest的serviceaccount。创建了一个名为test-sa的pod使用这个sa。</p><p>我们继续沿用。</p><h4 id="实验-1" tabindex="-1">实验 <a class="header-anchor" href="#实验-1" aria-label="Permalink to &quot;实验&quot;">​</a></h4><p>进入这个pod</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[root@paas-m-k8s-master-1 test]# kc exec -it test-sa -- /bin/sh</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># cd /var/run/secrets/kubernetes.io/serviceaccount</span></span>
<span class="line"><span># ls</span></span>
<span class="line"><span>ca.crt  namespace  token</span></span>
<span class="line"><span>#</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>现在访问一下api-server</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span>
<span class="line"><span># TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># curl -H &quot;Authorization: Bearer $TOKEN&quot; https://kubernetes/api/v1/namespaces/default/pods</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;kind&quot;: &quot;Status&quot;,</span></span>
<span class="line"><span>  &quot;apiVersion&quot;: &quot;v1&quot;,</span></span>
<span class="line"><span>  &quot;metadata&quot;: {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;status&quot;: &quot;Failure&quot;,</span></span>
<span class="line"><span>  &quot;message&quot;: &quot;forbidden: User \\&quot;system:serviceaccount:default:mytest\\&quot; cannot get path \\&quot;/\\&quot;&quot;,</span></span>
<span class="line"><span>  &quot;reason&quot;: &quot;Forbidden&quot;,</span></span>
<span class="line"><span>  &quot;details&quot;: {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;code&quot;: 403</span></span>
<span class="line"><span>}#</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>可以看到现在调用api-server是Forbidden的。</p><h4 id="绑定role" tabindex="-1">绑定role <a class="header-anchor" href="#绑定role" aria-label="Permalink to &quot;绑定role&quot;">​</a></h4><p>新建一个role，并进行roleBinding。</p><p>写在一起了</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kind: Role</span></span>
<span class="line"><span>apiVersion: rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  namespace: default</span></span>
<span class="line"><span>  name: role-demo</span></span>
<span class="line"><span>rules:</span></span>
<span class="line"><span>  - apiGroups: [&quot;&quot;]</span></span>
<span class="line"><span>    resources: [&quot;pods&quot;]</span></span>
<span class="line"><span>    verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]</span></span>
<span class="line"><span>    nonResourceURLs: []</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>kind: RoleBinding</span></span>
<span class="line"><span>apiVersion: rbac.authorization.k8s.io/v1</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: rolebinding-demo</span></span>
<span class="line"><span>  namespace: default</span></span>
<span class="line"><span>subjects:</span></span>
<span class="line"><span>  - kind: ServiceAccount</span></span>
<span class="line"><span>    name: mytest</span></span>
<span class="line"><span>    namespace: default</span></span>
<span class="line"><span>roleRef:</span></span>
<span class="line"><span>  kind: Role</span></span>
<span class="line"><span>  name: role-demo</span></span>
<span class="line"><span>  apiGroup: rbac.authorization.k8s.io</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>现在再进到之前的pod里</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>curl -H &quot;Authorization: Bearer $TOKEN&quot; https://kubernetes/api/v1/namespaces/default/pods</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+r+'" alt="image-20230704160100890"></p><p>可以看到已经可以调用了，说明通过roleBinding赋予了pod调用api-server的权限</p>',61),o=[c];function u(b,d,m,h,g,k){return a(),n("div",null,o)}const q=s(t,[["render",u]]);export{y as __pageData,q as default};
