import{_ as a,c as e,o as s,a2 as n}from"./chunks/framework.DukRYrIy.js";const p="/assets/image-20240129171326962.Dt8EXJAK.png",r="/assets/image-20240130112827332.B9z8xdBk.png",t="/assets/image-20240129172302802.uib_BnL9.png",v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/k8s/kubebuilder/kubebuilder（三）实现operator.md","filePath":"blogs/k8s/kubebuilder/kubebuilder（三）实现operator.md","lastUpdated":1711611689000}'),l={name:"blogs/k8s/kubebuilder/kubebuilder（三）实现operator.md"},i=n('<h2 id="kubebuilder-三-实现operator" tabindex="-1">kubebuilder（三）实现operator <a class="header-anchor" href="#kubebuilder-三-实现operator" aria-label="Permalink to &quot;kubebuilder（三）实现operator&quot;">​</a></h2><p>在前面的文章我们已经了解了operator项目的基本结构。现在我们来写一点简单的代码，然后把我们的crd和operator部署到k8s集群中。</p><h2 id="需求" tabindex="-1">需求 <a class="header-anchor" href="#需求" aria-label="Permalink to &quot;需求&quot;">​</a></h2><p>这是一个真实的需求，只不过做了简化。</p><p>在开发公司自己的paas平台，有一个需求是，用户在发版的时候，只需要在页面上填几个字段，我们在k8s中自动拉起service和deployment等资源，屏蔽k8s的底层技术对上层用户的困扰。</p><p>我们这里只要让用户填一下 业务名，镜像地址和副本数。</p><h2 id="定义api" tabindex="-1">定义API <a class="header-anchor" href="#定义api" aria-label="Permalink to &quot;定义API&quot;">​</a></h2><p>修改api目录下的demo_types.go文件,这个文件定义了我们的CRD中spec可用的字段。</p><p>注意: json 标签是必需的。为了能够序列化字段，任何你添加的新的字段一定有json标签。</p><p><img src="'+p+`" alt="image-20240129171326962"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type DemoSpec struct {</span></span>
<span class="line"><span>	// +kubebuilder:validation:Required</span></span>
<span class="line"><span>	Image string \`json:&quot;image,omitempty&quot;\`</span></span>
<span class="line"><span>	// +kubebuilder:validation:Required</span></span>
<span class="line"><span>	SvcName string \`json:&quot;svcName,omitempty&quot;\`</span></span>
<span class="line"><span>	// +kubebuilder:validation:Required</span></span>
<span class="line"><span>	Replicas *int32 \`json:&quot;replicas,omitempty&quot;\`</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后定义下资源的status</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type DemoStatus struct {</span></span>
<span class="line"><span>	Replicas *int32 \`json:&quot;replicas,omitempty&quot;\`</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>每次修改API定义后，需要执行命令自动重新生成CRD定义代码</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># make manifests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+r+'" alt="image-20240130112827332"></p><p>可以看到生成了我们的crd</p><h3 id="实现controller" tabindex="-1">实现controller <a class="header-anchor" href="#实现controller" aria-label="Permalink to &quot;实现controller&quot;">​</a></h3><p>kubebuilder已经很贴心的告诉了我们代码应该写在哪</p><p><img src="'+t+`" alt="image-20240129172302802"></p><p>代码流程</p><p>根据crd资源创建service和deployment</p><p>如果修改ctd中的replicas，同样触发deployment的变更</p><p>代码比较长，放在github上了</p><p><a href="https://github.com/jedyang/demo/tree/master/kubebuilder" target="_blank" rel="noreferrer">https://github.com/jedyang/demo/tree/master/kubebuilder</a></p><p>这里先不开发代码也是可以的，先打几行日志，把流程跑通</p><p>默认情况下，Reconcile方法返回错误就会触发再次循环。</p><h3 id="配置监听" tabindex="-1">配置监听 <a class="header-anchor" href="#配置监听" aria-label="Permalink to &quot;配置监听&quot;">​</a></h3><p>我们写完了Reconcile()，那么什么时候这个Reconcile会得到执行呢？</p><p>这就要看SetupWithManager()方法</p><p>SetupWithManager方法，就是用于添加我们关心哪些资源的变动。</p><p>默认生成的是这样的</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>func (r *DemoReconciler) SetupWithManager(mgr ctrl.Manager) error {</span></span>
<span class="line"><span>	return ctrl.NewControllerManagedBy(mgr).</span></span>
<span class="line"><span>		For(&amp;tutorialv1.Demo{}).</span></span>
<span class="line"><span>		Complete(r)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>表示监听我们自定义的这个tutorialv1.Demo资源。也就是我们在k8s中只要这个crd的变动，就会触发我们的Reconcile()方法</p><p>如果修改为</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import (</span></span>
<span class="line"><span>	...</span></span>
<span class="line"><span>	appsv1 &quot;k8s.io/api/apps/v1&quot;</span></span>
<span class="line"><span>	corev1 &quot;k8s.io/api/core/v1&quot;</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>func (r *DemoReconciler) SetupWithManager(mgr ctrl.Manager) error {</span></span>
<span class="line"><span>	return ctrl.NewControllerManagedBy(mgr).</span></span>
<span class="line"><span>		For(&amp;tutorialv1.Demo{}).</span></span>
<span class="line"><span>		Owns(&amp;corev1.Pod{}).</span></span>
<span class="line"><span>		Owns(&amp;corev1.Service{}).</span></span>
<span class="line"><span>		Owns(&amp;appsv1.Deployment{}).</span></span>
<span class="line"><span>		Complete(r)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>就是对任何tutorialv1.Demo或Service、Deployment、Pod的变化，我们的Controller都会监听到，并生成事件，触发Reconcile()方法。</p><h3 id="开发参考资源" tabindex="-1">开发参考资源 <a class="header-anchor" href="#开发参考资源" aria-label="Permalink to &quot;开发参考资源&quot;">​</a></h3><p>kubebuilder官方手册：<a href="https://book.kubebuilder.io/introduction.html" target="_blank" rel="noreferrer">https://book.kubebuilder.io/introduction.html</a></p><p>kubenetes api文档：<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/" target="_blank" rel="noreferrer">https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.21/</a></p><p><a href="https://kubernetes.io/docs/reference/kubernetes-api/" target="_blank" rel="noreferrer">https://kubernetes.io/docs/reference/kubernetes-api/</a></p>`,41),o=[i];function c(u,b,d,m,h,g){return s(),e("div",null,o)}const _=a(l,[["render",c]]);export{v as __pageData,_ as default};
