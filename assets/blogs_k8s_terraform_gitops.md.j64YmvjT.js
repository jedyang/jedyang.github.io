import{_ as t,c as e,o as i,a2 as o}from"./chunks/framework.DukRYrIy.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/k8s/terraform/gitops.md","filePath":"blogs/k8s/terraform/gitops.md","lastUpdated":1713348792000}'),s={name:"blogs/k8s/terraform/gitops.md"},p=o("<p>使用gitops管控IaC代码</p><p>操作步骤</p><ol><li><p>Terraform 的代码应该放在 Git 中管理，所有对环境的更改都应该通过提交 Pull Request（PR）到 Git 仓库来完成。这个 PR 需要被团队其他成员审查并批准。</p><p>在 GitOps 中，Git 中的 IaC 代码被看成“唯一的事实来源”，因此对这个代码的所有改动都需要经过一定的测试、审核，以确保更改是正确、安全的。</p></li><li><p>一旦 PR 被合并，Git 仓库的变化就会通过推送 API，自动送进自动化工具，并自动将新的目标状态应用到实际环境中。这通常由持续集成和持续部署（CI/CD）工具来完成。</p></li><li><p>选择 Jenkins、GitHub Actions 等适合团队使用的 CI/CD 的工具，这些工具将用于自动执行代码构建、测试和部署等任务。</p></li><li><p>在 Git 的 log 以及持续集成和持续部署的工具中会记录所有的构建、测试和部署活动，以便在出现问题时进行故障排除和根因分析。</p></li><li><p>监控线上环境的状态，并在检测到与 Git 仓库中描述的目标状态不一致时，自动修复这些不一致，或者给团队发送报警。</p></li></ol>",3),a=[p];function r(l,_,n,c,d,m){return i(),e("div",null,a)}const P=t(s,[["render",r]]);export{g as __pageData,P as default};
