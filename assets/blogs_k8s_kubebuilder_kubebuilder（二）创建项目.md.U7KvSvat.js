import{_ as s,c as n,o as a,a2 as e}from"./chunks/framework.DukRYrIy.js";const p="/assets/v2-371736f46c2077c9a8a759a09a0e5a21_720w.BBFDZjmF.webp",l="/assets/image-20240129164353991.CAA6E6Kj.png",i="/assets/image-20240129164517895.CjBhAICp.png",r="/assets/image-20240129164933847.BIBZCtXu.png",c="/assets/image-20240129165802014.ww7yEHVs.png",o="/assets/image-20240129165924556.obbZx7g-.png",f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/k8s/kubebuilder/kubebuilder（二）创建项目.md","filePath":"blogs/k8s/kubebuilder/kubebuilder（二）创建项目.md","lastUpdated":1711611689000}'),t={name:"blogs/k8s/kubebuilder/kubebuilder（二）创建项目.md"},b=e(`<h2 id="kubebuilder-二-创建项目及初始化" tabindex="-1">kubebuilder（二）创建项目及初始化 <a class="header-anchor" href="#kubebuilder-二-创建项目及初始化" aria-label="Permalink to &quot;kubebuilder（二）创建项目及初始化&quot;">​</a></h2><p>一个demo项目来了解kubebuilder的项目结构</p><h3 id="初始化项目" tabindex="-1">初始化项目 <a class="header-anchor" href="#初始化项目" aria-label="Permalink to &quot;初始化项目&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mkdir demo-operator</span></span>
<span class="line"><span>cd demo-operator</span></span>
<span class="line"><span>kubebuilder init --domain demo.com --repo demo.com/tutorial</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这一步创建了 Go module 工程基本的模板文件，引入了必要的依赖</p><p>如果不用--repo参数，也可以先</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>go mod init demo.com/tutorial</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>手动初始化一个go module工程</p><p>打印的日志</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Writing kustomize manifests for you to edit...</span></span>
<span class="line"><span>Writing scaffold for you to edit...</span></span>
<span class="line"><span>Get controller runtime:</span></span>
<span class="line"><span>$ go get sigs.k8s.io/controller-runtime@v0.10.0</span></span>
<span class="line"><span>Update dependencies:</span></span>
<span class="line"><span>$ go mod tidy</span></span>
<span class="line"><span>Next: define a resource with:</span></span>
<span class="line"><span>$ kubebuilder create api</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>可以看到我这里使用的controller-runtime是0.10.0版本。</p><p>查看</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[root@paas-m-k8s-master-1 demo-operator]# tree</span></span>
<span class="line"><span>.</span></span>
<span class="line"><span>├── config</span></span>
<span class="line"><span>│   ├── default</span></span>
<span class="line"><span>│   │   ├── kustomization.yaml</span></span>
<span class="line"><span>│   │   ├── manager_auth_proxy_patch.yaml</span></span>
<span class="line"><span>│   │   └── manager_config_patch.yaml</span></span>
<span class="line"><span>│   ├── manager</span></span>
<span class="line"><span>│   │   ├── controller_manager_config.yaml</span></span>
<span class="line"><span>│   │   ├── kustomization.yaml</span></span>
<span class="line"><span>│   │   └── manager.yaml</span></span>
<span class="line"><span>│   ├── prometheus</span></span>
<span class="line"><span>│   │   ├── kustomization.yaml</span></span>
<span class="line"><span>│   │   └── monitor.yaml</span></span>
<span class="line"><span>│   └── rbac</span></span>
<span class="line"><span>│       ├── auth_proxy_client_clusterrole.yaml</span></span>
<span class="line"><span>│       ├── auth_proxy_role_binding.yaml</span></span>
<span class="line"><span>│       ├── auth_proxy_role.yaml</span></span>
<span class="line"><span>│       ├── auth_proxy_service.yaml</span></span>
<span class="line"><span>│       ├── kustomization.yaml</span></span>
<span class="line"><span>│       ├── leader_election_role_binding.yaml</span></span>
<span class="line"><span>│       ├── leader_election_role.yaml</span></span>
<span class="line"><span>│       ├── role_binding.yaml</span></span>
<span class="line"><span>│       └── service_account.yaml</span></span>
<span class="line"><span>├── Dockerfile</span></span>
<span class="line"><span>├── go.mod</span></span>
<span class="line"><span>├── go.sum</span></span>
<span class="line"><span>├── hack</span></span>
<span class="line"><span>│   └── boilerplate.go.txt</span></span>
<span class="line"><span>├── main.go</span></span>
<span class="line"><span>├── Makefile</span></span>
<span class="line"><span>└── PROJECT</span></span>
<span class="line"><span></span></span>
<span class="line"><span>6 directories, 24 files</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>就是一个标准的go module项目</p><h3 id="一些重要的文件" tabindex="-1">一些重要的文件 <a class="header-anchor" href="#一些重要的文件" aria-label="Permalink to &quot;一些重要的文件&quot;">​</a></h3><ol><li>Makefile：非常重要的工具，以后编译构建、部署、运行都会用到；</li><li>PROJECT：kubebuilder工程的元数据，在生成各种API的时候会用到这里面的信息；</li><li>config/default：基于kustomize制作的配置文件，为controller提供标准配置，也可以按需要去修改调整；</li><li>config/manager：一些和manager有关的细节配置，例如镜像的资源限制；</li><li>config/rbac：如果需要限制operator在kubernetes中的操作权限，就要通过rbac来做精细的权限配置了</li></ol><p>main.go是程序的入口，初始化了Manager，由manager来管理api和controller</p><p><img src="`+p+`" alt="img"></p><p>我们现在捋一下，k8s接收crd资源描述，crd被我们将要编写的controllrt控制。那么manager是什么</p><p>manager是用来管理controller的控制器，代码的主要功能就是启动controller，并使多个controller共存</p><p>下面我们继续创建crd文件和对应的controller代码</p><h3 id="创建crd文件和controller" tabindex="-1">创建crd文件和controller <a class="header-anchor" href="#创建crd文件和controller" aria-label="Permalink to &quot;创建crd文件和controller&quot;">​</a></h3><p>创建api的命令如下：但先别急着执行</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kubebuilder create api --group tutorial --version v1 --kind Demo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>也就是常说的GVK</span></span>
<span class="line"><span>1）group参数表示组的概念</span></span>
<span class="line"><span>2）version定义版本</span></span>
<span class="line"><span>3）kind定义自定义资源类型</span></span>
<span class="line"><span>4）以上参数组成了自定义资源的yaml 的 apiVersion和kind</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><p>如果直接执行，你可能会遇到这个错误</p><p><img src="`+l+'" alt="image-20240129164353991"></p><p>原因是</p><p>在执行过程中，会根据Makefile来执行操作。</p><p>其中有一步是使用controller-gen来生成代码</p><p><img src="'+i+'" alt="image-20240129164517895"></p><p>这里寻找controller-gen的路径是$(shell pwd)/bin/controller-gen</p><p>并不是我之前安装的controller-gen路径，所以需要修改以下。</p><p>否则找不到，就会去下载，但是我当前工作目录下并没有bin目录。会失败</p><p>改成</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>CONTROLLER_GEN = controller-gen</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因为我上一篇准备工作，已经放到全局可执行了。</p><p>同理，把kustomize也顺手改掉，后面的make会用到</p><p><img src="'+r+'" alt="image-20240129164933847"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>KUSTOMIZE = kustomize</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>现在执行一下创建命令</p><p><img src="'+c+'" alt="image-20240129165802014"></p><p>执行成功之后，查看下目录</p><p><img src="'+o+`" alt="image-20240129165924556"></p><p>可以看到，kubebuilder自动为我们创建了几个关键的目录和文件</p><ul><li>api/v1 ：对应于创建时指定的version v1。 名字demo对应我们创建时指定的Kind</li><li>config/crd</li><li>controllers</li></ul><p>我们查看几个重要的文件</p><ol><li><p>在PROJECT文件中新增了API资源声明</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>domain: demo.com</span></span>
<span class="line"><span>layout:</span></span>
<span class="line"><span>- go.kubebuilder.io/v3</span></span>
<span class="line"><span>projectName: demo-operator</span></span>
<span class="line"><span>repo: demo.com/tutorial</span></span>
<span class="line"><span>resources:</span></span>
<span class="line"><span>- api:</span></span>
<span class="line"><span>    crdVersion: v1</span></span>
<span class="line"><span>    namespaced: true</span></span>
<span class="line"><span>  controller: true</span></span>
<span class="line"><span>  domain: demo.com</span></span>
<span class="line"><span>  group: tutorial</span></span>
<span class="line"><span>  kind: Demo</span></span>
<span class="line"><span>  path: demo.com/tutorial/api/v1</span></span>
<span class="line"><span>  version: v1</span></span>
<span class="line"><span>version: &quot;3&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>新增了api目录，包含crd的类型定义</p></li><li><p>新增了crd目录，是crd的描述文件</p></li><li><p>在rbac目录中新增了对应的role文件</p></li><li><p>新增controller目录，包含controller文件</p></li><li><p>还有一个不容易发现的修改点是main.go文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>	if err = (&amp;controllers.DemoReconciler{</span></span>
<span class="line"><span>		Client: mgr.GetClient(),</span></span>
<span class="line"><span>		Scheme: mgr.GetScheme(),</span></span>
<span class="line"><span>	}).SetupWithManager(mgr); err != nil {</span></span>
<span class="line"><span>		setupLog.Error(err, &quot;unable to create controller&quot;, &quot;controller&quot;, &quot;Demo&quot;)</span></span>
<span class="line"><span>		os.Exit(1)</span></span>
<span class="line"><span>	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注册了我们的controller</p></li></ol><h3 id="一些不重要的文件" tabindex="-1">一些不重要的文件 <a class="header-anchor" href="#一些不重要的文件" aria-label="Permalink to &quot;一些不重要的文件&quot;">​</a></h3><p>可以看到在api下还有两个文件</p><ul><li>groupversion_info.go</li><li>zz_generated.deepcopy.go</li></ul><p>这两个文件都不需要去修改。groupversion_info是一些group和version信息，zz_generated.deepcopy.go是会自动生成的。</p>`,52),u=[b];function m(d,g,h,v,k,_){return a(),n("div",null,u)}const C=s(t,[["render",m]]);export{f as __pageData,C as default};
