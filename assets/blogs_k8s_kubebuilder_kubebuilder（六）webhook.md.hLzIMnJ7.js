import{_ as s,c as a,o as n,a2 as e}from"./chunks/framework.DukRYrIy.js";const p="/assets/8a1425044b460fbd6790fe3f05d11761ffe94d45.MC4Mqd3y.png",i="/assets/image-20240318145925949.B3T7QnOz.png",l="/assets/image-20240318151327123.DSdUSjHT.png",r="/assets/image-20240318152519441.BFUjxosQ.png",t="/assets/image-20240318154234686.CTJSrylv.png",o="/assets/image-20240318154438377.BvcW54Ce.png",c="/assets/image-20240318173558821._D5enOc9.png",b="/assets/image-20240318173642764-17107546032621.Dhlbv-3k.png",d="/assets/image-20240320171742770.CPt-8YQp.png",u="/assets/image-20240320171848151.Cv5_v58O.png",m="/assets/image-20240320173017108.c1YkqJ-T.png",h="/assets/image-20240320173733830.B-udOVc4.png",g="/assets/image-20240320174235546.C86Mz0u4.png",S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/k8s/kubebuilder/kubebuilder（六）webhook.md","filePath":"blogs/k8s/kubebuilder/kubebuilder（六）webhook.md","lastUpdated":1711611689000}'),k={name:"blogs/k8s/kubebuilder/kubebuilder（六）webhook.md"},v=e('<h2 id="kubebuilder-六-webhook" tabindex="-1">kubebuilder（六）webhook <a class="header-anchor" href="#kubebuilder-六-webhook" aria-label="Permalink to &quot;kubebuilder（六）webhook&quot;">​</a></h2><p>operator中的webhook也是很重要的一块功能。也是相对比较独立的模块，所以放在后面讲。</p><p>webhook是一个callback，注册到k8s的api-server上。当某个特定的时间发生时，api server就会查询注册的webhook，并根据一些逻辑确认转发消息给某个webhook</p><p>在k8s中，有3类webhook，<a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#admission-webhooks" target="_blank" rel="noreferrer">admission webhook</a>, <a href="https://kubernetes.io/docs/reference/access-authn-authz/webhook/" target="_blank" rel="noreferrer">authorization webhook</a> 和 <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definition-versioning/#webhook-conversion" target="_blank" rel="noreferrer">CRD conversion webhook</a>.</p><p>在kubebuilder的底层controller-runtime框架里，支持admission webhooks and CRD conversion webhooks。</p><p>这篇笔记讲的是admission webhook。（以下的webhook就是指admission webhook）。 CRD conversion webhooks用于多版本api转换时，目前入门阶段先不讨论这个话题。</p><p>admission webhook又可以分成2类。</p><p>一种是校验类的webhook，只读取信息，做校验判断，不会改变消息，称为validating类型。这里的校验就可以写复杂的业务了，前面的代码里我们也配置过简单的validation校验。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>	// +kubebuilder:validation:Required</span></span>\n<span class="line"><span>	Image string `json:&quot;image,omitempty&quot;`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>另一种就是可修改对象的webhook，比如设置默认值功能，称为mutating类型。</p><h3 id="执行顺序" tabindex="-1">执行顺序 <a class="header-anchor" href="#执行顺序" aria-label="Permalink to &quot;执行顺序&quot;">​</a></h3><p>先执行mutating webhook，后执行validating webhook</p><p>就是说先设置，后校验。不需要担心，校验完了之后，另一个webhook又修改了值。</p><h2 id="工作流" tabindex="-1">工作流 <a class="header-anchor" href="#工作流" aria-label="Permalink to &quot;工作流&quot;">​</a></h2><p><img src="'+p+`" alt="1"></p><ol><li>用户创建一个CRD的实例</li><li>k8s api-server将这个请求转发给对应的webhook</li><li>webhook完成默认的参数配置操作，并进行一些参数校验操作。成功之后将cr返回给api-server。api-server进行落库</li><li>我们编写的controller的在后台监控cr,拉取cr内容，并执行我们编写的逻辑</li><li>cr的执行结果同步回api-server</li></ol><h2 id="创建webhook" tabindex="-1">创建webhook <a class="header-anchor" href="#创建webhook" aria-label="Permalink to &quot;创建webhook&quot;">​</a></h2><p>和创建api一样，webhook也由kubebuilder创建脚手架代码。</p><p>我们在之前的代码框架上继续操作。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kubebuilder create webhook --group tutorial --version v1 --kind Demo --defaulting --programmatic-validation</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>--defaulting 是会创建配置默认值的webhook</p><p>--programmatic-validation 创建有校验功能的webhook</p><p>kubebuilder的参数</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Flags:</span></span>
<span class="line"><span>      --conversion                if set, scaffold the conversion webhook</span></span>
<span class="line"><span>      --defaulting                if set, scaffold the defaulting webhook</span></span>
<span class="line"><span>      --force                     attempt to create resource even if it already exists</span></span>
<span class="line"><span>      --group string              resource Group</span></span>
<span class="line"><span>  -h, --help                      help for webhook</span></span>
<span class="line"><span>      --kind string               resource Kind</span></span>
<span class="line"><span>      --plural string             resource irregular plural form</span></span>
<span class="line"><span>      --programmatic-validation   if set, scaffold the validating webhook</span></span>
<span class="line"><span>      --version string            resource Version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>--conversion 就是创建CRD conversion webhooks。用于多版本api转换时，现在先不用管。</p><p>执行完之后，看看生成的代码</p><p><img src="`+i+'" alt="image-20240318145925949"></p><p>查看main.go</p><p><img src="'+l+'" alt="image-20240318151327123"></p><p>作用就是在manager中注册了我们的webhook</p><h2 id="业务代码" tabindex="-1">业务代码 <a class="header-anchor" href="#业务代码" aria-label="Permalink to &quot;业务代码&quot;">​</a></h2><p>更重要的文件是生成的这个webhook文件，我们的业务代码是写在这里的</p><p><img src="'+r+'" alt="image-20240318152519441"></p><p><img src="'+t+'" alt="image-20240318154234686"></p><p>我们的Demo实现了webhook.Defaulter接口。即拥有了配置crd的默认值的能力。</p><p>稍后我们在这个Default()方法里编写配置默认值的操作。</p><p><img src="'+o+`" alt="image-20240318154438377"></p><p>我们的Demo实现了webhook.Validator接口，在crd进行增删改时可以进行验证操作</p><p>简单实现几个方法</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>func (r *Demo) Default() {</span></span>
<span class="line"><span>	demolog.Info(&quot;default&quot;, &quot;name&quot;, r.Name)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// TODO(user): fill in your defaulting logic.</span></span>
<span class="line"><span>	if r.Spec.Replicas == nil {</span></span>
<span class="line"><span>		r.Spec.Replicas = new(int32)</span></span>
<span class="line"><span>		*r.Spec.Replicas = 1</span></span>
<span class="line"><span>		demolog.Info(&quot;配置默认值&quot;, &quot;replicas&quot;, *r.Spec.Replicas)</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 创建和更新调一下validate方法</span></span>
<span class="line"><span>func (r *Demo) ValidateCreate() error {</span></span>
<span class="line"><span>	demolog.Info(&quot;validate create&quot;, &quot;name&quot;, r.Name)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// TODO(user): fill in your validation logic upon object creation.</span></span>
<span class="line"><span>	// 调用 r.validate() 方法，来验证对象的合法性。</span></span>
<span class="line"><span>	return r.validate()</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>func (r *Demo) validate() error {</span></span>
<span class="line"><span>	var allErrs field.ErrorList</span></span>
<span class="line"><span>	if *r.Spec.Replicas &gt; 10 {</span></span>
<span class="line"><span>		err := field.Invalid(field.NewPath(&quot;spec&quot;).Child(&quot;replicas&quot;),</span></span>
<span class="line"><span>			*r.Spec.Replicas,</span></span>
<span class="line"><span>			&quot;副本数不能大于10&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		allErrs = append(allErrs, err)</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	if len(allErrs) == 0 {</span></span>
<span class="line"><span>		demolog.Info(&quot;参数合法&quot;)</span></span>
<span class="line"><span>		return nil</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	return apierrors.NewInvalid(schema.GroupKind{</span></span>
<span class="line"><span>		Group: &quot;tutorial&quot;,</span></span>
<span class="line"><span>		Kind:  &quot;Demo&quot;},</span></span>
<span class="line"><span>		r.Name, allErrs)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在部署webhook前，还需要修改下配置</p><p>在config/default/kustomization.yaml中</p><p><img src="`+c+'" alt="image-20240318173558821"></p><p>注释全都放开</p><p>在config/crd/kustomization.yaml中</p><p><img src="'+b+'" alt="image-20240318173642764"></p><p>注释放开</p><h2 id="部署前准备" tabindex="-1">部署前准备 <a class="header-anchor" href="#部署前准备" aria-label="Permalink to &quot;部署前准备&quot;">​</a></h2><h3 id="安装cert-manager" tabindex="-1">安装cert-manager <a class="header-anchor" href="#安装cert-manager" aria-label="Permalink to &quot;安装cert-manager&quot;">​</a></h3><p>因为api-server是通过https调用webhook，所以需要部署cert-manager来自动管理证书。</p><p>这也是kubebuilder官方建议的方案</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.3/cert-manager.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+d+'" alt="image-20240320171742770"></p><p>因为我的测试环境是1.18的k8s，所以选择1.7版本的cert manager。</p><p><img src="'+u+'" alt="image-20240320171848151"></p><h3 id="清理环境" tabindex="-1">清理环境 <a class="header-anchor" href="#清理环境" aria-label="Permalink to &quot;清理环境&quot;">​</a></h3><p>先把之前测试的资源全部删除</p><p>删除测试demo</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kubectl delete -f config/samples/tutorial_v1_demo.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>删除operator</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kubectl delete -f demo-operator.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>删除crd</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>make uninstall</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>make install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>make docker-build docker-push IMG=harbor-test.xxx.net/paas/demo-operator:2.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>make deploy IMG=harbor-test.xxx.net/paas/demo-operator:2.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+m+`" alt="image-20240320173017108"></p><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><h3 id="测试默认值功能" tabindex="-1">测试默认值功能 <a class="header-anchor" href="#测试默认值功能" aria-label="Permalink to &quot;测试默认值功能&quot;">​</a></h3><p>修改一下之前的yaml,去掉replicas字段</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>apiVersion: tutorial.demo.com/v1</span></span>
<span class="line"><span>kind: Demo</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  namespace: demo</span></span>
<span class="line"><span>  name: demo-sample</span></span>
<span class="line"><span>spec:</span></span>
<span class="line"><span>  image: nginx:1.22</span></span>
<span class="line"><span>  svcName: demo-ng</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>查看manager的日志</p><p><img src="`+h+`" alt="image-20240320173733830"></p><p>调用了配置默认值的代码</p><h3 id="测试参数校验功能" tabindex="-1">测试参数校验功能 <a class="header-anchor" href="#测试参数校验功能" aria-label="Permalink to &quot;测试参数校验功能&quot;">​</a></h3><p>将yaml中的replicas字段设置为15，超过我们的最大值</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[root@paas-m-k8s-master-1 demo-operator]# kubectl apply -f config/samples/tutorial_v1_demo.yaml</span></span>
<span class="line"><span>The Demo &quot;demo-sample&quot; is invalid: spec.replicas: Invalid value: 15: 副本数不能大于10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>直接报错</p><p>查看日志</p><p><img src="`+g+'" alt="image-20240320174235546"></p><p>进行了校验</p>',83),f=[v];function w(_,q,y,C,x,D){return n(),a("div",null,f)}const R=s(k,[["render",w]]);export{S as __pageData,R as default};
