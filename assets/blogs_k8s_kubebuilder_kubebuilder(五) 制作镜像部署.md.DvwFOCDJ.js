import{_ as a,c as s,o as e,a2 as n}from"./chunks/framework.DukRYrIy.js";const p="/assets/image-20240314175005139.nir7W9Ik.png",i="/assets/image-20240314173521885.DmDQRbHx.png",l="/assets/image-20240315092100583.1JHf6cGt.png",r="/assets/image-20240315092820168.C2lg778S.png",t="/assets/image-20240315093227608.wMncmJEt.png",o="/assets/image-20240314175854575.CgClyC0e.png",c="/assets/image-20240315095308702.SVeUdh2-.png",C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/k8s/kubebuilder/kubebuilder(五) 制作镜像部署.md","filePath":"blogs/k8s/kubebuilder/kubebuilder(五) 制作镜像部署.md","lastUpdated":1711088688000}'),d={name:"blogs/k8s/kubebuilder/kubebuilder(五) 制作镜像部署.md"},m=n(`<h2 id="制作镜像" tabindex="-1">制作镜像 <a class="header-anchor" href="#制作镜像" aria-label="Permalink to &quot;制作镜像&quot;">​</a></h2><p>好了，前面是使用make run进行测试运行。现在我们把operator打出镜像进行分发。</p><p>先修改一下Dockerfile,否则可能下载依赖有问题</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ENV GO111MODULE=on</span></span>
<span class="line"><span>ENV GOPROXY=https://goproxy.cn,direct</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后，默认的这个FROM gcr.io/distroless/static:nonroot也是下不到的</p><p>替换成这个</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>anjia0532/distroless.static:nonroot</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+p+'" alt="image-20240314175005139"></p><p>我这里是自己搭的私有harbor</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>make docker-build docker-push IMG=harbor-test.xxx.net/paas/demo-operator:1.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+i+`" alt="image-20240314173521885"></p><h2 id="部署operator镜像" tabindex="-1">部署operator镜像 <a class="header-anchor" href="#部署operator镜像" aria-label="Permalink to &quot;部署operator镜像&quot;">​</a></h2><p>部署有两种方案</p><h3 id="make-deploy" tabindex="-1">make deploy <a class="header-anchor" href="#make-deploy" aria-label="Permalink to &quot;make deploy&quot;">​</a></h3><p>使用项目自带的deploy指令，这种方式是将operator部署到本地集群中，其实和make run差不多</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>make deploy IMG=harbor-test.xxx.net/paas/demo-operator:1.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>也可修改~/.kube/config来连接其他集群，但还是太麻烦。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kustomize build config/default | kubectl apply -f -</span></span>
<span class="line"><span>namespace/demo-operator-system created</span></span>
<span class="line"><span>customresourcedefinition.apiextensions.k8s.io/demoes.tutorial.demo.com unchanged</span></span>
<span class="line"><span>serviceaccount/demo-operator-controller-manager created</span></span>
<span class="line"><span>role.rbac.authorization.k8s.io/demo-operator-leader-election-role created</span></span>
<span class="line"><span>clusterrole.rbac.authorization.k8s.io/demo-operator-manager-role created</span></span>
<span class="line"><span>clusterrole.rbac.authorization.k8s.io/demo-operator-metrics-reader created</span></span>
<span class="line"><span>clusterrole.rbac.authorization.k8s.io/demo-operator-proxy-role created</span></span>
<span class="line"><span>rolebinding.rbac.authorization.k8s.io/demo-operator-leader-election-rolebinding created</span></span>
<span class="line"><span>clusterrolebinding.rbac.authorization.k8s.io/demo-operator-manager-rolebinding created</span></span>
<span class="line"><span>clusterrolebinding.rbac.authorization.k8s.io/demo-operator-proxy-rolebinding created</span></span>
<span class="line"><span>configmap/demo-operator-manager-config created</span></span>
<span class="line"><span>service/demo-operator-controller-manager-metrics-service created</span></span>
<span class="line"><span>deployment.apps/demo-operator-controller-manager created</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>查看部署情况</p><p><img src="`+l+'" alt="image-20240315092100583"></p><p>查看一下pod的日志</p><p><img src="'+r+'" alt="image-20240315092820168"></p><p>我们再部署一个demo测试一下</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kubectl apply -f config/samples/tutorial_v1_demo.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+t+'" alt="image-20240315093227608"></p><p>执行调谐完成</p><p>如果你的部署遇到问题，可能会遇到镜像下载不下来的问题。</p><p>原因还是gcr.io/kubebuilder/kube-rbac-proxy被墙了</p><p>改一下</p><p><img src="'+o+`" alt="image-20240314175854575"></p><h3 id="yaml部署" tabindex="-1">yaml部署 <a class="header-anchor" href="#yaml部署" aria-label="Permalink to &quot;yaml部署&quot;">​</a></h3><p>我们需要的当然是把写的operator分发到别的集群部署。</p><p>通过分析make deploy脚本，来编写yaml</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.PHONY: deploy</span></span>
<span class="line"><span>deploy: manifests kustomize ## Deploy controller to the K8s cluster specified in ~/.kube/config.</span></span>
<span class="line"><span>	cd config/manager &amp;&amp; $(KUSTOMIZE) edit set image controller=\${IMG}</span></span>
<span class="line"><span>	$(KUSTOMIZE) build config/default | kubectl apply -f -</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个脚本的本质就是用kustomize对config下的manager和default中的yaml进行变量替换</p><p>然后整合成一个yaml，传给kubectl apply执行</p><p>所以啊，我们只要执行下这两行就可以得到我们想要的yaml文件，然后就可以随便到别的集群执行了哦</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cd config/manager &amp;&amp; /usr/local/bin/kustomize edit set image controller=harbor-test.xxx.net/paas/demo-operator:1.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cd ../.. &amp;&amp; /usr/local/bin/kustomize build config/default &gt; demo-operator.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>输出这样一个yaml</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>apiVersion: v1</span></span>
<span class="line"><span>kind: Namespace</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  labels:</span></span>
<span class="line"><span>    control-plane: controller-manager</span></span>
<span class="line"><span>  name: demo-operator-system</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>太长了，不贴了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>去别的集群，部署试试</p><p>部署operator</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kubectl apply -f demo-operator.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>部署一个demo crd</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>kubectl apply -f demo-simple.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+c+'" alt="image-20240315095308702"></p><p>完成</p>',47),b=[m];function u(g,h,k,v,y,_){return e(),s("div",null,b)}const x=a(d,[["render",u]]);export{C as __pageData,x as default};
